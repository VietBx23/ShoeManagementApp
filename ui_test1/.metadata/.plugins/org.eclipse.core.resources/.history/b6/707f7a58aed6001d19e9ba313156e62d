package com.snethlios.dao;

import java.io.File;
import java.io.FileOutputStream;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.hamcrest.CoreMatchers;

import org.mockito.ArgumentMatchers;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.junit.Assert;

import org.testng.IObjectFactory;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.ObjectFactory;
import org.testng.annotations.Test;

import com.snethlios.entity.KhachHang;
import com.snethlios.entity.SanPham;
import com.snethlios.utils.JdbcHelper;
import com.snethlios.utils.XDate;

@PrepareForTest({ JdbcHelper.class, SanPhamDao.class })
public class SanPhamDaoTest {
	SanPhamDao sanPhamDAO;
	SanPhamDao sanPhamDAOSPY;
	HSSFWorkbook workBook;
	HSSFSheet sheet;
	Map<String, Object[]> TestResultNG = new HashMap<String, Object[]>();
	int count =0;
	@ObjectFactory
	public IObjectFactory getObjectFactory() {
		return new org.powermock.modules.testng.PowerMockObjectFactory();
	}

	@BeforeClass
	public void setUpClass() throws Exception {
		System.out.println("Dz");

		workBook = new HSSFWorkbook();
		sheet = workBook.createSheet("Kết quả test");

		TestResultNG.put("" + count++, new Object[] { "Id", "Test Case Description", "Test Case Procedure", "Test Data",
				"Expected Output", "Test Date", "Result" });
	}

	@AfterClass
	public void tearDownClass() throws Exception {
		System.out.println("Oke Đã ghi ngeo");
		Set<String> keySet = TestResultNG.keySet();
		int rowNum = 0;
		for (String key : keySet) {
			Row row = sheet.createRow(rowNum++);
			Object[] objArr = TestResultNG.get(key);
			int cellNum = 0;
			for (Object obj : objArr) {
				Cell cell = row.createCell(cellNum++);
				if (obj instanceof Date) {
					cell.setCellValue((Date) obj);
				} else if (obj instanceof Boolean) {
					cell.setCellValue((Boolean) obj);
				} else if (obj instanceof String) {
					cell.setCellValue((String) obj);
				} else if (obj instanceof Double) {
					cell.setCellValue((Double) obj);
				} else if (obj instanceof Integer) {
					cell.setCellValue((Integer) obj);
				}
			}
		}
		try {
			FileOutputStream out = new FileOutputStream(new File("SanPham.xls"));
			workBook.write(out);
			out.close();
		} catch (Exception e) {
			// TODO: handle exception
			System.out.println(e.getMessage());
		}
	}

	@BeforeMethod
	public void setUpMethod() {
		sanPhamDAO = new SanPhamDao();
PowerMockito.mockStatic(JdbcHelper.class);
		sanPhamDAOSPY = PowerMockito.spy(new SanPhamDao());
	}

	// insert
	@Test
	public void testInsertValid() {
		SanPham sanpham = new SanPham();
		System.out.println("test insert valid");
		sanpham.setMaSp("AD001");
		sanpham.setTenSp("Sản phẩm 1");
		sanpham.setLoai("Giày thể thao");
		sanpham.setDonGia(100.0);
		sanpham.setSoLuong(10);
		sanpham.setMau("Màu xanh");
		sanpham.setKichThuoc(44);
		sanpham.setHang("Nike");
		sanpham.setNgayNhap(XDate.toDate(XDate.toString(new Date(), "yyyy/MM/dd"), "yyyy/MM/dd"));
		System.out.println(sanpham.getNgayNhap());
		sanpham.setMaHinh("H1");
		sanpham.setMaNV("TeoNV");
		sanpham.setMaKM("KM01");
		sanpham.setTrangThai(false);
		sanpham.setGiamGia(5);
		TestResultNG.put("" + count++, new Object[] {"SP001", "Insert Valid", "Nhập Mã SP = \"AD001\" \n Nhập "
				+ "Tên SP = \"Sản phẩm 1\" \n Nhập loại = \"Giày thể thao\" \n Nhập đơn giá = \"100.0\" \n "
				+ "Nhập số lượng: \"12\" \n Nhập màu: \"Màu xanh\" \n Nhập kích thước: \"44\" \n Nhập hãng: \"Nike\" \n "
				+ "Nhập ngày nhập: \"12/02/2023\" \n Nhập mã hình: \"H1\" \n Nhập mã NV: \"TeoNV\" \n Nhập mã KM: \"KM01\" \n "
				+ "Nhập trạng thái: \"false\" \n ", "Valid", "Insert thành công", XDate.toString(new Date(), "dd/MM/yyyy"), "Pass"});
		SanPhamDao spDAO = new SanPhamDao();
		spDAO.insert(sanpham);
	}

	@Test(expectedExceptions = Exception.class)
	public void testInsertNull() {
		SanPham sanpham = null;
		System.out.println("test insert null");
		SanPhamDao spDAO = new SanPhamDao();
		
		spDAO.insert(sanpham);
	}

	@Test(expectedExceptions = Exception.class)
	public void testInsertEmpty() {
		SanPham sanpham = new SanPham();
		System.out.println("test insert empty");
		SanPhamDao spDAO = new SanPhamDao();
		TestResultNG.put("" + count++, new Object[] {"SP001", "Insert Valid", "Nhập Mã SP = \"\" \n Nhập "
				+ "Tên SP = \"\" \n Nhập loại = \"\" \n Nhập đơn giá = \"\" \n "
				+ "Nhập số lượng: \"\" \n Nhập màu: \"\" \n Nhập kích thước: \"\" \n Nhập hãng: \"\" \n "
				+ "Nhập ngày nhập: \"\" \n Nhập mã hình: \"\" \n Nhập mã NV: \"\" \n Nhập mã KM: \"\" \n "
				+ "Nhập trạng thái: \"\" \n ", "InValid", "Insert thành công", XDate.toString(new Date(), "dd/MM/yyyy"), "Fail"});
		spDAO.insert(sanpham);
	}

	@Test
	public void testInsert_PrimaryKeyEmpty() {
		SanPham sanpham = new SanPham();
		System.out.println("test insert primary key empty");
		sanpham.setMaSp(null);
		sanpham.setTenSp("Sản phẩm 1");
		sanpham.setLoai("Giày thể thao");
		sanpham.setDonGia(100.0);
		sanpham.setSoLuong(10);
		sanpham.setMau("Màu xanh");
		sanpham.setKichThuoc(44);
		sanpham.setHang("Nike");
		System.out.println(sanpham.getHang());
		sanpham.setNgayNhap(XDate.toDate(XDate.toString(new Date(), "yyyy/MM/dd"), "yyyy/MM/dd"));
		System.out.println(sanpham.getNgayNhap());
		sanpham.setMaHinh("H1");
sanpham.setMaNV("TeoNV");
		sanpham.setMaKM("KM01");
		sanpham.setTrangThai(false);
		sanpham.setGiamGia(5);
		SanPhamDao spDAO = new SanPhamDao();
		TestResultNG.put("" + count++, new Object[] {"SP001", "Insert Valid", "Nhập Mã SP = \"\" \n Nhập "
				+ "Tên SP = \"Sản phẩm 1\" \n Nhập loại = \"Giày thể thao\" \n Nhập đơn giá = \"100.0\" \n "
				+ "Nhập số lượng: \"12\" \n Nhập màu: \"Màu xanh\" \n Nhập kích thước: \"44\" \n Nhập hãng: \"Nike\" \n "
				+ "Nhập ngày nhập: \"12/02/2023\" \n Nhập mã hình: \"H1\" \n Nhập mã NV: \"TeoNV\" \n Nhập mã KM: \"KM01\" \n "
				+ "Nhập trạng thái: \"false\" \n ", "InValid", "Thêm sản phẩm không thành công", XDate.toString(new Date(), "dd/MM/yyyy"), "Pass"});
		spDAO.insert(sanpham);
	}

	@Test
	public void testInsert_FKEmpty() {
		SanPham sanpham = new SanPham();
		System.out.println("test insert fk empty");
		sanpham.setMaSp("AD1");
		sanpham.setTenSp("Sản phẩm 1");
		sanpham.setLoai("Giày thể thao");
		sanpham.setDonGia(100.0);
		sanpham.setSoLuong(10);
		sanpham.setMau("Màu xanh");
		sanpham.setKichThuoc(44);
		sanpham.setHang("Nike");
		System.out.println(sanpham.getHang());
		sanpham.setNgayNhap(XDate.toDate(XDate.toString(new Date(), "yyyy/MM/dd"), "yyyy/MM/dd"));
		System.out.println(sanpham.getNgayNhap());
		sanpham.setMaHinh("");
		sanpham.setMaNV("");
		sanpham.setMaKM("");
		sanpham.setTrangThai(false);
		sanpham.setGiamGia(5);
		SanPhamDao spDAO = new SanPhamDao();
		TestResultNG.put("" + count++, new Object[] {"SP001", "Insert Valid", "Nhập Mã SP = \"AD001\" \n Nhập "
				+ "Tên SP = \"Sản phẩm 1\" \n Nhập loại = \"Giày thể thao\" \n Nhập đơn giá = \"100.0\" \n "
				+ "Nhập số lượng: \"12\" \n Nhập màu: \"Màu xanh\" \n Nhập kích thước: \"44\" \n Nhập hãng: \"Nike\" \n "
				+ "Nhập ngày nhập: \"12/02/2023\" \n Nhập mã hình: \"\" \n Nhập mã NV: \"\" \n Nhập mã KM: \"\" \n "
				+ "Nhập trạng thái: \"\" \n ", "InValid", "Thêm sản phẩm không thành công", XDate.toString(new Date(), "dd/MM/yyyy"), "Pass"});
		spDAO.insert(sanpham);
	}

	@Test
	public void testInsert_TenSPEmpty() {
		SanPham sanpham = new SanPham();
		System.out.println("test insert tensp empty");
		sanpham.setMaSp("AD1");
		sanpham.setTenSp("");
		sanpham.setLoai("Giày thể thao");
		sanpham.setDonGia(100.0);
		sanpham.setSoLuong(10);
		sanpham.setMau("Màu xanh");
		sanpham.setKichThuoc(44);
		sanpham.setHang("Nike");
		System.out.println(sanpham.getHang());
		sanpham.setNgayNhap(XDate.toDate(XDate.toString(new Date(), "yyyy/MM/dd"), "yyyy/MM/dd"));
		System.out.println(sanpham.getNgayNhap());
		sanpham.setMaHinh("H1");
		sanpham.setMaNV("TeoNV");
		sanpham.setMaKM("KM01");
		sanpham.setTrangThai(false);
		sanpham.setGiamGia(5);
		SanPhamDao spDAO = new SanPhamDao();
		TestResultNG.put("" + count++, new Object[] {"SP001", "Insert Valid", "Nhập Mã SP = \"AD001\" \n Nhập "
+ "Tên SP = \"\" \n Nhập loại = \"Giày thể thao\" \n Nhập đơn giá = \"100.0\" \n "
				+ "Nhập số lượng: \"12\" \n Nhập màu: \"Màu xanh\" \n Nhập kích thước: \"44\" \n Nhập hãng: \"Nike\" \n "
				+ "Nhập ngày nhập: \"12/02/2023\" \n Nhập mã hình: \"H1\" \n Nhập mã NV: \"TeoNV\" \n Nhập mã KM: \"KM01\" \n "
				+ "Nhập trạng thái: \"false\" \n ", "InValid", "Thêm sản phẩm không thành công", XDate.toString(new Date(), "dd/MM/yyyy"), "Pass"});
		spDAO.insert(sanpham);
	}

	@Test
	public void testInsert_LoaiSPEmpty() {
		SanPham sanpham = new SanPham();
		System.out.println("test insert loaisp empty");
		sanpham.setMaSp("AD1");
		sanpham.setTenSp("Addidas 01");
		sanpham.setLoai("");
		sanpham.setDonGia(100.0);
		sanpham.setSoLuong(10);
		sanpham.setMau("Màu xanh");
		sanpham.setKichThuoc(44);
		sanpham.setHang("Nike");
		System.out.println(sanpham.getHang());
		sanpham.setNgayNhap(XDate.toDate(XDate.toString(new Date(), "yyyy/MM/dd"), "yyyy/MM/dd"));
		System.out.println(sanpham.getNgayNhap());
		sanpham.setMaHinh("H1");
		sanpham.setMaNV("TeoNV");
		sanpham.setMaKM("KM01");
		sanpham.setTrangThai(false);
		sanpham.setGiamGia(5);
		SanPhamDao spDAO = new SanPhamDao();
		TestResultNG.put("" + count++, new Object[] {"SP001", "Insert Valid", "Nhập Mã SP = \"AD001\" \n Nhập "
				+ "Tên SP = \"Sản phẩm 1\" \n Nhập loại = \"\" \n Nhập đơn giá = \"100.0\" \n "
				+ "Nhập số lượng: \"12\" \n Nhập màu: \"Màu xanh\" \n Nhập kích thước: \"44\" \n Nhập hãng: \"Nike\" \n "
				+ "Nhập ngày nhập: \"12/02/2023\" \n Nhập mã hình: \"H1\" \n Nhập mã NV: \"TeoNV\" \n Nhập mã KM: \"KM01\" \n "
				+ "Nhập trạng thái: \"false\" \n ", "InValid", "Thêm sản phẩm không thành công", XDate.toString(new Date(), "dd/MM/yyyy"), "Pass"});
		spDAO.insert(sanpham);
	}

	@Test(expectedExceptions = Exception.class)
	public void testInsert_DonGiaEmpty() {
		SanPham sanpham = new SanPham();
		System.out.println("test insert loaisp empty");
		sanpham.setMaSp("AD1");
		sanpham.setTenSp("Addidas 01");
		sanpham.setLoai("Giày thể thao");
		sanpham.setDonGia(Double.parseDouble(""));
		sanpham.setSoLuong(10);
		sanpham.setMau("Màu xanh");
		sanpham.setKichThuoc(44);
		sanpham.setHang("Nike");
		System.out.println(sanpham.getHang());
		sanpham.setNgayNhap(XDate.toDate(XDate.toString(new Date(), "yyyy/MM/dd"), "yyyy/MM/dd"));
		System.out.println(sanpham.getNgayNhap());
		sanpham.setMaHinh("H1");
		sanpham.setMaNV("TeoNV");
		sanpham.setMaKM("KM01");
		sanpham.setTrangThai(false);
		sanpham.setGiamGia(5);
		SanPhamDao spDAO = new SanPhamDao();
		TestResultNG.put("" + count++, new Object[] {"SP001", "Insert Valid", "Nhập Mã SP = \"AD001\" \n Nhập "
				+ "Tên SP = \"Sản phẩm 1\" \n Nhập loại = \"Giày thể thao\" \n Nhập đơn giá = \"\" \n "
				+ "Nhập số lượng: \"12\" \n Nhập màu: \"Màu xanh\" \n Nhập kích thước: \"44\" \n Nhập hãng: \"Nike\" \n "
+ "Nhập ngày nhập: \"12/02/2023\" \n Nhập mã hình: \"H1\" \n Nhập mã NV: \"TeoNV\" \n Nhập mã KM: \"KM01\" \n "
				+ "Nhập trạng thái: \"false\" \n ", "InValid", "Thêm sản phẩm không thành công", XDate.toString(new Date(), "dd/MM/yyyy"), "Pass"});
		spDAO.insert(sanpham);
	}

	@Test(expectedExceptions = Exception.class)
	public void testInsert_SoLuongEmpty() {
		SanPham sanpham = new SanPham();
		System.out.println("test insert loaisp empty");
		sanpham.setMaSp("AD1");
		sanpham.setTenSp("Addidas 01");
		sanpham.setLoai("Giày thể thao");
		sanpham.setDonGia(100.0);
		sanpham.setSoLuong(Integer.parseInt(""));
		sanpham.setMau("Màu xanh");
		sanpham.setKichThuoc(44);
		sanpham.setHang("Nike");
		System.out.println(sanpham.getHang());
		sanpham.setNgayNhap(XDate.toDate(XDate.toString(new Date(), "yyyy/MM/dd"), "yyyy/MM/dd"));
		System.out.println(sanpham.getNgayNhap());
		sanpham.setMaHinh("H1");
		sanpham.setMaNV("TeoNV");
		sanpham.setMaKM("KM01");
		sanpham.setTrangThai(false);
		sanpham.setGiamGia(5);
		SanPhamDao spDAO = new SanPhamDao();
		TestResultNG.put("" + count++, new Object[] {"SP001", "Insert Valid", "Nhập Mã SP = \"AD001\" \n Nhập "
				+ "Tên SP = \"Sản phẩm 1\" \n Nhập loại = \"Giày thể thao\" \n Nhập đơn giá = \"100.0\" \n "
				+ "Nhập số lượng: \"\" \n Nhập màu: \"Màu xanh\" \n Nhập kích thước: \"44\" \n Nhập hãng: \"Nike\" \n "
				+ "Nhập ngày nhập: \"12/02/2023\" \n Nhập mã hình: \"H1\" \n Nhập mã NV: \"TeoNV\" \n Nhập mã KM: \"KM01\" \n "
				+ "Nhập trạng thái: \"false\" \n ", "InValid", "Thêm sản phẩm không thành công", XDate.toString(new Date(), "dd/MM/yyyy"), "Pass"});
		spDAO.insert(sanpham);
	}

	@Test
	public void testInsert_MauEmpty() {
		SanPham sanpham = new SanPham();
		System.out.println("test insert loaisp empty");
		sanpham.setMaSp("AD1");
		sanpham.setTenSp("Addidas 01");
		sanpham.setLoai("Giày thể thao");
		sanpham.setDonGia(100.0);
		sanpham.setSoLuong(1);
		sanpham.setMau("");
		sanpham.setKichThuoc(44);
		sanpham.setHang("Nike");
		System.out.println(sanpham.getHang());
		sanpham.setNgayNhap(XDate.toDate(XDate.toString(new Date(), "yyyy/MM/dd"), "yyyy/MM/dd"));
		System.out.println(sanpham.getNgayNhap());
		sanpham.setMaHinh("H1");
		sanpham.setMaNV("TeoNV");
		sanpham.setMaKM("KM01");
		sanpham.setTrangThai(false);
		sanpham.setGiamGia(5);
		SanPhamDao spDAO = new SanPhamDao();
		TestResultNG.put("" + count++, new Object[] {"SP001", "Insert Valid", "Nhập Mã SP = \"AD001\" \n Nhập "
				+ "Tên SP = \"Sản phẩm 1\" \n Nhập loại = \"Giày thể thao\" \n Nhập đơn giá = \"100.0\" \n "
				+ "Nhập số lượng: \"1\" \n Nhập màu: \"\" \n Nhập kích thước: \"44\" \n Nhập hãng: \"Nike\" \n "
				+ "Nhập ngày nhập: \"12/02/2023\" \n Nhập mã hình: \"H1\" \n Nhập mã NV: \"TeoNV\" \n Nhập mã KM: \"KM01\" \n "
+ "Nhập trạng thái: \"false\" \n ", "InValid", "Thêm sản phẩm không thành công", XDate.toString(new Date(), "dd/MM/yyyy"), 
				"Pass"});
		spDAO.insert(sanpham);
	}

	@Test(expectedExceptions = Exception.class)
	public void testInsert_KichThuocEmpty() {
		SanPham sanpham = new SanPham();
		System.out.println("test insert loaisp empty");
		sanpham.setMaSp("AD1");
		sanpham.setTenSp("Addidas 01");
		sanpham.setLoai("Giày thể thao");
		sanpham.setDonGia(100.0);
		sanpham.setSoLuong(1);
		sanpham.setMau("Xanh");
		sanpham.setKichThuoc(Integer.parseInt(""));
		sanpham.setHang("Nike");
		System.out.println(sanpham.getHang());
		sanpham.setNgayNhap(XDate.toDate(XDate.toString(new Date(), "yyyy/MM/dd"), "yyyy/MM/dd"));
		System.out.println(sanpham.getNgayNhap());
		sanpham.setMaHinh("H1");
		sanpham.setMaNV("TeoNV");
		sanpham.setMaKM("KM01");
		sanpham.setTrangThai(false);
		sanpham.setGiamGia(5);
		SanPhamDao spDAO = new SanPhamDao();
		TestResultNG.put("" + count++, new Object[] {"SP001", "Insert Valid", "Nhập Mã SP = \"AD001\" \n Nhập "
				+ "Tên SP = \"Sản phẩm 1\" \n Nhập loại = \"Giày thể thao\" \n Nhập đơn giá = \"100.0\" \n "
				+ "Nhập số lượng: \"11\" \n Nhập màu: \"Màu xanh\" \n Nhập kích thước: \"\" \n Nhập hãng: \"Nike\" \n "
				+ "Nhập ngày nhập: \"12/02/2023\" \n Nhập mã hình: \"H1\" \n Nhập mã NV: \"TeoNV\" \n Nhập mã KM: \"KM01\" \n "
				+ "Nhập trạng thái: \"false\" \n ", "InValid", "Thêm sản phẩm không thành công", XDate.toString(new Date(), "dd/MM/yyyy"), "Pass"});
		spDAO.insert(sanpham);
	}

	@Test(expectedExceptions = Exception.class)
	public void testInsert_HangEmpty() {
		SanPham sanpham = new SanPham();
		System.out.println("test insert loaisp empty");
		sanpham.setMaSp("AD1");
		sanpham.setTenSp("Addidas 01");
		sanpham.setLoai("Giày thể thao");
		sanpham.setDonGia(100.0);
		sanpham.setSoLuong(1);
		sanpham.setMau("Xanh");
		sanpham.setKichThuoc(Integer.parseInt(""));
		sanpham.setHang("Nike");
		System.out.println(sanpham.getHang());
		sanpham.setNgayNhap(XDate.toDate(XDate.toString(new Date(), "yyyy/MM/dd"), "yyyy/MM/dd"));
		System.out.println(sanpham.getNgayNhap());
		sanpham.setMaHinh("H1");
		sanpham.setMaNV("TeoNV");
		sanpham.setMaKM("KM01");
		sanpham.setTrangThai(false);
		sanpham.setGiamGia(5);
		SanPhamDao spDAO = new SanPhamDao();
		TestResultNG.put("" + count++, new Object[] {"SP001", "Insert Valid", "Nhập Mã SP = \"AD001\" \n Nhập "
				+ "Tên SP = \"Sản phẩm 1\" \n Nhập loại = \"Giày thể thao\" \n Nhập đơn giá = \"100.0\" \n "
				+ "Nhập số lượng: \"11\" \n Nhập màu: \"Màu xanh\" \n Nhập kích thước: \"44\" \n Nhập hãng: \"\" \n "
				+ "Nhập ngày nhập: \"12/02/2023\" \n Nhập mã hình: \"H1\" \n Nhập mã NV: \"TeoNV\" \n Nhập mã KM: \"KM01\" \n "
				+ "Nhập trạng thái: \"false\" \n ", "InValid", "Thêm sản phẩm không thành công", XDate.toString(new Date(), "dd/MM/yyyy"), "Pass"});
spDAO.insert(sanpham);
	}
	
	// update

	@Test
	public void updateValid() {
		System.out.println("test update ");
		SanPham sanpham = new SanPham();
		sanpham.setTenSp("Addidas 01");
		sanpham.setLoai("Giày thể thao loại 1");
		sanpham.setDonGia(100.0);
		sanpham.setSoLuong(10);
		sanpham.setMau("Màu xanh");
		sanpham.setKichThuoc(44);
		sanpham.setHang("Nike");
		sanpham.setNgayNhap(XDate.toDate(XDate.toString(new Date(), "yyyy/MM/dd"), "yyyy/MM/dd"));
		sanpham.setMaHinh("H2");
		sanpham.setMaNV("TeoNV");
		sanpham.setMaKM("KM01");
		sanpham.setMaSp("AD1");
		SanPhamDao spDAO = new SanPhamDao();
		TestResultNG.put("" + count++, new Object[] {"SP002", "Update Valid", "Nhập Mã SP = \"AD001\" \n Nhập "
				+ "Tên SP = \"Sản phẩm 1\" \n Nhập loại = \"Giày thể thao\" \n Nhập đơn giá = \"100.0\" \n "
				+ "Nhập số lượng: \"11\" \n Nhập màu: \"Màu xanh\" \n Nhập kích thước: \"44\" \n Nhập hãng: \"Nike\" \n "
				+ "Nhập ngày nhập: \"12/02/2023\" \n Nhập mã hình: \"H1\" \n Nhập mã NV: \"TeoNV\" \n Nhập mã KM: \"KM01\" \n "
				+ "\n ", "Valid", "Cập nhật sản phẩm thành công", XDate.toString(new Date(), "dd/MM/yyyy"), "Pass"});
		spDAO.update(sanpham);
	}

	@Test(expectedExceptions = Exception.class)
	public void updateNull() {
		System.out.println("test update null");
		SanPham masSP = null;
		SanPhamDao instance = new SanPhamDao();
		TestResultNG.put("" + count++, new Object[] {"SP002", "Update InValid", "Nhập Mã SP = \"\" \n Nhập "
				+ "Tên SP = \"\" \n Nhập loại = \"\" \n Nhập đơn giá = \"\" \n "
				+ "Nhập số lượng: \"\" \n Nhập màu: \"\" \n Nhập kích thước: \"\" \n Nhập hãng: \"\" \n "
				+ "Nhập ngày nhập: \"\" \n Nhập mã hình: \"\" \n Nhập mã NV: \"\" \n Nhập mã KM: \"\" \n "
				+ "\n ", "InValid", "Cập nhật sản phẩm không thành công", XDate.toString(new Date(), "dd/MM/yyyy"), "Pass"});
		instance.update(masSP);
	}

	@Test(expectedExceptions = Exception.class)
	public void updateEmpty() {
		System.out.println("test update empty");
		SanPham model = new SanPham();
		SanPhamDao instance = new SanPhamDao();
		TestResultNG.put("" + count++, new Object[] {"SP002", "Update InValid", "Nhập Mã SP = \"\" \n Nhập "
				+ "Tên SP = \"\" \n Nhập loại = \"\" \n Nhập đơn giá = \"\" \n "
				+ "Nhập số lượng: \"\" \n Nhập màu: \"\" \n Nhập kích thước: \"\" \n Nhập hãng: \"\" \n "
				+ "Nhập ngày nhập: \"\" \n Nhập mã hình: \"\" \n Nhập mã NV: \"\" \n Nhập mã KM: \"\" \n "
				+ "\n ", "InValid", "Cập nhật sản phẩm không thành công", XDate.toString(new Date(), "dd/MM/yyyy"), "Fail"});
		instance.update(model);
	}

	@Test
	public void updateMaSP_empty() {
		System.out.println("test update ");
		SanPham sanpham = new SanPham();
		sanpham.setTenSp("Addidas 01");
		sanpham.setLoai("Giày thể thao loại 1");
		sanpham.setDonGia(100.0);
		sanpham.setSoLuong(10);
		sanpham.setMau("Màu xanh");
		sanpham.setKichThuoc(44);
		sanpham.setHang("Nike");
sanpham.setNgayNhap(XDate.toDate(XDate.toString(new Date(), "yyyy/MM/dd"), "yyyy/MM/dd"));
		sanpham.setMaHinh("H2");
		sanpham.setMaNV("TeoNV");
		sanpham.setMaKM("KM01");
		sanpham.setMaSp("");
		SanPhamDao spDAO = new SanPhamDao();
		TestResultNG.put("" + count++, new Object[] {"SP002", "Update Valid", "Nhập Mã SP = \"\" \n Nhập "
				+ "Tên SP = \"Sản phẩm 1\" \n Nhập loại = \"Giày thể thao\" \n Nhập đơn giá = \"100.0\" \n "
				+ "Nhập số lượng: \"11\" \n Nhập màu: \"Màu xanh\" \n Nhập kích thước: \"44\" \n Nhập hãng: \"Nike\" \n "
				+ "Nhập ngày nhập: \"12/02/2023\" \n Nhập mã hình: \"H1\" \n Nhập mã NV: \"TeoNV\" \n Nhập mã KM: \"KM01\" \n "
				+ "\n ", "InValid", "Cập nhật sản phẩm không thành công", XDate.toString(new Date(), "dd/MM/yyyy"), "Pass"});
		spDAO.update(sanpham);
	}

	@Test
	public void updateTenSP_empty() {
		System.out.println("test update ");
		SanPham sanpham = new SanPham();
		sanpham.setTenSp("");
		sanpham.setLoai("Giày thể thao loại 1");
		sanpham.setDonGia(100.0);
		sanpham.setSoLuong(10);
		sanpham.setMau("Màu xanh");
		sanpham.setKichThuoc(44);
		sanpham.setHang("Nike");
		sanpham.setNgayNhap(XDate.toDate(XDate.toString(new Date(), "yyyy/MM/dd"), "yyyy/MM/dd"));
		sanpham.setMaHinh("H2");
		sanpham.setMaNV("TeoNV");
		sanpham.setMaKM("KM01");
		sanpham.setMaSp("AD1");
		SanPhamDao spDAO = new SanPhamDao();
		TestResultNG.put("" + count++, new Object[] {"SP002", "Update Valid", "Nhập Mã SP = \"AD001\" \n Nhập "
				+ "Tên SP = \"\" \n Nhập loại = \"Giày thể thao\" \n Nhập đơn giá = \"100.0\" \n "
				+ "Nhập số lượng: \"11\" \n Nhập màu: \"Màu xanh\" \n Nhập kích thước: \"44\" \n Nhập hãng: \"Nike\" \n "
				+ "Nhập ngày nhập: \"12/02/2023\" \n Nhập mã hình: \"H1\" \n Nhập mã NV: \"TeoNV\" \n Nhập mã KM: \"KM01\" \n "
				+ "\n ", "InValid", "Cập nhật sản phẩm không thành công", XDate.toString(new Date(), "dd/MM/yyyy"), "Pass"});
		spDAO.update(sanpham);
	}

	@Test
	public void updateLoaiSP_empty() {
		System.out.println("test update ");
		SanPham sanpham = new SanPham();
		sanpham.setTenSp("Adidas 01");
		sanpham.setLoai("");
		sanpham.setDonGia(100.0);
		sanpham.setSoLuong(10);
		sanpham.setMau("Màu xanh");
		sanpham.setKichThuoc(44);
		sanpham.setHang("Nike");
		sanpham.setNgayNhap(XDate.toDate(XDate.toString(new Date(), "yyyy/MM/dd"), "yyyy/MM/dd"));
		sanpham.setMaHinh("H2");
		sanpham.setMaNV("TeoNV");
		sanpham.setMaKM("KM01");
		sanpham.setMaSp("AD1");
		SanPhamDao spDAO = new SanPhamDao();
		TestResultNG.put("" + count++, new Object[] {"SP002", "Update Valid", "Nhập Mã SP = \"AD001\" \n Nhập "
				+ "Tên SP = \"Adidas01\" \n Nhập loại = \"\" \n Nhập đơn giá = \"100.0\" \n "
				+ "Nhập số lượng: \"11\" \n Nhập màu: \"Màu xanh\" \n Nhập kích thước: \"44\" \n Nhập hãng: \"Nike\" \n "
				+ "Nhập ngày nhập: \"12/02/2023\" \n Nhập mã hình: \"H1\" \n Nhập mã NV: \"TeoNV\" \n Nhập mã KM: \"KM01\" \n "
+ "\n ", "InValid", "Cập nhật sản phẩm không thành công", XDate.toString(new Date(), "dd/MM/yyyy"), "Pass"});
		spDAO.update(sanpham);
	}

	// delete
	@Test
	public void deleteValid() {
		System.out.println("test delete ");
		String masp = "AD1";
		SanPhamDao spDAO = new SanPhamDao();
		TestResultNG.put("" + count++, new Object[] {"SP003", "Delete Valid", "Nhập Mã SP = \"AD001\""
				+ "\n ", "Valid", "Xóa sản phẩm thành công", XDate.toString(new Date(), "dd/MM/yyyy"), "Pass"});
		spDAO.delete(masp);
	}

	@Test
	public void deleteMaSP_null() {
		System.out.println("test delete null");
		String masp = null;
		SanPhamDao spDAO = new SanPhamDao();
		TestResultNG.put("" + count++, new Object[] {"SP003", "Delete Valid", "Nhập Mã SP = \"\""
				+ "\n ", "InValid", "Xóa sản phẩm không thành công", XDate.toString(new Date(), "dd/MM/yyyy"), "Pass"});
		spDAO.delete(masp);
	}

	@Test(expectedExceptions = Exception.class)
	public void deleteMaSP_empty() {
		System.out.println("test delete empty");
		String masp = "";
		SanPhamDao spDAO = new SanPhamDao();
		TestResultNG.put("" + count++, new Object[] {"SP003", "Delete Valid", "Nhập Mã SP = \"\""
				+ "\n ", "InValid", "Xóa sản phẩm không thành công", XDate.toString(new Date(), "dd/MM/yyyy"), "Fail"});
		spDAO.delete(masp);
	}

	// findALL
	@Test
	public void testselectAll() throws Exception {
		SanPham model = new SanPham();
		List<SanPham> expResult = new ArrayList<>();
		expResult.add(model);
		PowerMockito.doReturn(expResult).when(sanPhamDAOSPY, "selectBySQL", ArgumentMatchers.anyString());
		List<SanPham> result = sanPhamDAOSPY.selectAll();
		Assert.assertThat(result, CoreMatchers.is(expResult));
	}

	// findByID
	@Test
	public void testselectByID() throws Exception {
		String masp = "km01";
		SanPham model = new SanPham();
		List<SanPham> expResult = new ArrayList<>();
		
		expResult.add(model);

		PowerMockito.doReturn(expResult).when(sanPhamDAOSPY, "selectBySQL", ArgumentMatchers.anyString(),
				ArgumentMatchers.any());
		TestResultNG.put("" + count++, new Object[] {"SP004", "Find SP Valid", "Nhập Mã SP = \"AD001\""
				+ "\n ", "Valid", "", XDate.toString(new Date(), "dd/MM/yyyy"), "Fail"});
		SanPham result = sanPhamDAOSPY.selectByID(masp);
		Assert.assertThat(result, CoreMatchers.is(model));
	}
	// gio hang

	@Test(expectedExceptions = Exception.class)
	public void testAddCartValidNull() {
		SanPham model = new SanPham();
		int soLuong = Integer.parseInt(null);
		model.setMaSp("NK13");
		model.setTenSp("NIKE");
		model.setDonGia(20000.0);
		model.setGiamGia(2000);
		model.setHang("nike");
		model.setLoai("giay sneaker");
		model.setMaHinh("BH1");
		model.setMaKM("KH001");
		model.setMaNV("TEONV");
		model.setMau("Đỏ");
		model.setNgayNhap(XDate.toDate(XDate.toString(new Date(), "yyyy/MM/dd"), "yyyy/MM/dd"));
		model.setSoLuong(20);
		model.setTrangThai(true);
		model.setKichThuoc(30);
		SanPhamDao instance = new SanPhamDao();
		instance.insert(model);
	}
@Test(expectedExceptions = Exception.class)
	public void testAddCartValid() {
		SanPham model = new SanPham();
		int soLuong = 0;
		if (soLuong == 0) {
			soLuong = Integer.parseInt(null);
		}
		model.setMaSp("NK13");
		model.setTenSp("NIKE");
		model.setDonGia(20000.0);
		model.setGiamGia(2000);
		model.setHang("nike");
		model.setLoai("giay sneaker");
		model.setMaHinh("BH1");
		model.setMaKM("KH001");
		model.setMaNV("TEONV");
		model.setMau("Đỏ");
		model.setNgayNhap(XDate.toDate(XDate.toString(new Date(), "yyyy/MM/dd"), "yyyy/MM/dd"));
		model.setSoLuong(20);
		model.setTrangThai(true);
		model.setKichThuoc(30);
		SanPhamDao instance = new SanPhamDao();
		instance.insert(model);
	}

	@Test(expectedExceptions = Exception.class)
	public void testAddCartValidString() {
		SanPham model = new SanPham();
		int soLuong = Integer.parseInt("abc");
		model.setMaSp("NK13");
		model.setTenSp("NIKE");
		model.setDonGia(20000.0);
		model.setGiamGia(2000);
		model.setHang("nike");
		model.setLoai("giay sneaker");
		model.setMaHinh("BH1");
		model.setMaKM("KH001");
		model.setMaNV("TEONV");
		model.setMau("Đỏ");
		model.setNgayNhap(XDate.toDate(XDate.toString(new Date(), "yyyy/MM/dd"), "yyyy/MM/dd"));
		model.setSoLuong(20);
		model.setTrangThai(true);
		model.setKichThuoc(30);
		SanPhamDao instance = new SanPhamDao();
		instance.insert(model);
	}

	@Test
	public void testAddCart() {
		SanPham model = new SanPham();
		int soLuong = 2;
		model.setMaSp("NK13");
		model.setTenSp("NIKE");
		model.setDonGia(20000.0);
		model.setGiamGia(2000);
		model.setHang("nike");
		model.setLoai("giay sneaker");
		model.setMaHinh("BH1");
		model.setMaKM("KH001");
		model.setMaNV("TEONV");
		model.setMau("Đỏ");
		model.setNgayNhap(XDate.toDate(XDate.toString(new Date(), "yyyy/MM/dd"), "yyyy/MM/dd"));
		model.setSoLuong(20);
		model.setTrangThai(true);
		model.setKichThuoc(30);
		SanPhamDao instance = new SanPhamDao();
		instance.insert(model);
	}

	@Test
	public void testAddCartEqualsMaSp() {
		SanPham model = new SanPham();
		int soLuong = 1;
		String maSp = "NK13";
		if (maSp.equals(model.getMaSp())) {
			soLuong += model.getSoLuong();
		}
		model.setMaSp("NK13");
		model.setTenSp("NIKE");
		model.setDonGia(20000.0);
		model.setGiamGia(2000);
		model.setHang("nike");
		model.setLoai("giay sneaker");
		model.setMaHinh("BH1");
		model.setMaKM("KH001");
		model.setMaNV("TEONV");
		model.setMau("Đỏ");
		model.setNgayNhap(XDate.toDate(XDate.toString(new Date(), "yyyy/MM/dd"), "yyyy/MM/dd"));
		model.setSoLuong(20);
		model.setTrangThai(true);
		model.setKichThuoc(30);
		SanPhamDao instance = new SanPhamDao();
		instance.insert(model);
	}

	@Test
	public void testDeleteCardWithNull() {
		SanPham model = new SanPham();
		String maSp = "";
		SanPhamDao instance = new SanPhamDao();
		instance.delete(maSp);
	}
	
	
	
}
